[
  {
    "question": "Which is the most popular JavaScript framework?",
    "options": ["Angular", "React", "Svelte", "Vue"],
    "correctOption": 1,
    "points": 10
  },
  {
    "question": "Which company invented React?",
    "options": ["Google", "Apple", "Netflix", "Facebook"],
    "correctOption": 3,
    "points": 10
  },
  {
    "question": "What's the fundamental building block of React apps?",
    "options": ["Components", "Blocks", "Elements", "Effects"],
    "correctOption": 0,
    "points": 10
  },
  {
    "question": "What's the name of the syntax we use to describe the UI in React components?",
    "options": ["FBJ", "Babel", "JSX", "ES2015"],
    "correctOption": 2,
    "points": 10
  },
  {
    "question": "How does data flow naturally in React apps?",
    "options": [
      "From parents to children",
      "From children to parents",
      "Both ways",
      "The developers decides"
    ],
    "correctOption": 0,
    "points": 10
  },
  {
    "question": "How to pass data into a child component?",
    "options": ["State", "Props", "PropTypes", "Parameters"],
    "correctOption": 1,
    "points": 10
  },
  {
    "question": "When to use derived state?",
    "options": [
      "Whenever the state should not trigger a re-render",
      "Whenever the state can be synchronized with an effect",
      "Whenever the state should be accessible to all components",
      "Whenever the state can be computed from another state variable"
    ],
    "correctOption": 3,
    "points": 30
  },
  {
    "question": "What triggers a UI re-render in React?",
    "options": [
      "Running an effect",
      "Passing props",
      "Updating state",
      "Adding event listeners to DOM elements"
    ],
    "correctOption": 2,
    "points": 20
  },
  {
    "question": "When do we directly \"touch\" the DOM in React?",
    "options": [
      "When we need to listen to an event",
      "When we need to change the UI",
      "When we need to add styles",
      "Almost never"
    ],
    "correctOption": 3,
    "points": 20
  },
  {
    "question": "In what situation do we use a callback to update state?",
    "options": [
      "When updating the state will be slow",
      "When the updated state is very data-intensive",
      "When the state update should happen faster",
      "When the new state depends on the previous state"
    ],
    "correctOption": 3,
    "points": 30
  },
  {
    "question": "If we pass a function to useState, when will that function be called?",
    "options": [
      "On each re-render",
      "Each time we update the state",
      "Only on the initial render",
      "The first time we update the state"
    ],
    "correctOption": 2,
    "points": 30
  },
  {
    "question": "Which hook to use for an API request on the component's initial render?",
    "options": ["useState", "useEffect", "useRef", "useReducer"],
    "correctOption": 1,
    "points": 10
  },
  {
    "question": "Which variables should go into the useEffect dependency array?",
    "options": [
      "Usually none",
      "All our state variables",
      "All state and props referenced in the effect",
      "All variables needed for clean up"
    ],
    "correctOption": 2,
    "points": 30
  },
  {
    "question": "An effect will always run on the initial render.",
    "options": [
      "True",
      "It depends on the dependency array",
      "False",
      "In depends on the code in the effect"
    ],
    "correctOption": 0,
    "points": 30
  },
  {
    "question": "When will an effect run if it doesn't have a dependency array?",
    "options": [
      "Only when the component mounts",
      "Only when the component unmounts",
      "The first time the component re-renders",
      "Each time the component is re-rendered"
    ],
    "correctOption": 3,
    "points": 20
  },
  {
    "question": "Which method is used to update the state in React?",
    "options": ["setState", "useState", "updateState", "stateUpdate"],
    "correctOption": 0,
    "points": 10
  },
  {
    "question": "What is the purpose of useRef in React?",
    "options": [
      "Storing mutable values",
      "Creating a reference to a DOM element",
      "Handling side-effects",
      "Managing state in functional components"
    ],
    "correctOption": 1,
    "points": 10
  },
  {
    "question": "What is a higher-order component in React?",
    "options": [
      "A component that renders another component",
      "A component that manages the state of another component",
      "A function that takes a component and returns a new component",
      "A component that is a child of another component"
    ],
    "correctOption": 2,
    "points": 20
  },
  {
    "question": "What is the purpose of React's context API?",
    "options": [
      "To share state across components without prop-drilling",
      "To manage local component state",
      "To handle HTTP requests",
      "To improve performance by memoizing components"
    ],
    "correctOption": 0,
    "points": 20
  },
  {
    "question": "Which of the following is a valid React component?",
    "options": [
      "function MyComponent() {}",
      "class MyComponent extends React.Component {}",
      "const MyComponent = () => {}",
      "All of the above"
    ],
    "correctOption": 3,
    "points": 10
  },
  {
    "question": "Which of the following hooks can be used to memoize a function in React?",
    "options": ["useMemo", "useEffect", "useCallback", "useState"],
    "correctOption": 2,
    "points": 20
  },
  {
    "question": "How can you optimize performance in React?",
    "options": [
      "Using useEffect for async operations",
      "Memoizing functions with useMemo or useCallback",
      "Using React.memo to prevent unnecessary re-renders",
      "All of the above"
    ],
    "correctOption": 3,
    "points": 30
  },
  {
    "question": "What does JSX stand for?",
    "options": [
      "JavaScript XML",
      "JavaScript Extension",
      "JavaScript Executed",
      "Java Syntax Extension"
    ],
    "correctOption": 0,
    "points": 10
  },
  {
    "question": "How do you define default props in React?",
    "options": [
      "static defaultProps = {}",
      "defaultProps = {}",
      "this.defaultProps = {}",
      "Props.defaultProps = {}"
    ],
    "correctOption": 0,
    "points": 20
  },
  {
    "question": "Which lifecycle method is called after the component is rendered for the first time?",
    "options": [
      "componentDidMount",
      "componentWillMount",
      "componentDidUpdate",
      "componentWillUpdate"
    ],
    "correctOption": 0,
    "points": 20
  },
  {
    "question": "What does React.memo do?",
    "options": [
      "Memoizes the state",
      "Memoizes the entire component to avoid unnecessary re-renders",
      "Memoizes the props",
      "None of the above"
    ],
    "correctOption": 1,
    "points": 30
  },
  {
    "question": "How can you share state across components without prop drilling?",
    "options": [
      "Using context API",
      "Using Redux",
      "Using state lifting",
      "Both A and B"
    ],
    "correctOption": 3,
    "points": 20
  },
  {
    "question": "What is an uncontrolled component in React?",
    "options": [
      "A component that doesn't store its own state",
      "A component that doesn't render its children",
      "A component that manages its own DOM state",
      "A component without any props"
    ],
    "correctOption": 2,
    "points": 20
  },
  {
    "question": "Which of these is NOT a valid React Hook?",
    "options": ["useState", "useContext", "useRoute", "useReducer"],
    "correctOption": 2,
    "points": 10
  },
  {
    "question": "What does the useContext hook do in React?",
    "options": [
      "Accesses a context value",
      "Provides state for components",
      "Manages side effects",
      "None of the above"
    ],
    "correctOption": 0,
    "points": 20
  }
]

